# pre-build stage
FROM node:23-alpine AS node
FROM ruby:3.3.3-alpine3.19 AS pre-builder

# Set ARGs and ENVs upfront for better cache utilization
ARG NODE_VERSION="23.7.0"
ARG PNPM_VERSION="10.2.0"
ARG BUNDLE_WITHOUT="development:test"
ARG RAILS_SERVE_STATIC_FILES=true
ARG RAILS_ENV=production
ARG NODE_ENV=production
ARG NODE_OPTIONS="--max-old-space-size=4096 --openssl-legacy-provider"

ENV NODE_VERSION=${NODE_VERSION}
ENV PNPM_VERSION=${PNPM_VERSION}
ENV BUNDLE_WITHOUT=${BUNDLE_WITHOUT}
ENV BUNDLER_VERSION=2.5.11
ENV RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES}
ENV RAILS_ENV=${RAILS_ENV}
ENV NODE_OPTIONS=${NODE_OPTIONS}
ENV BUNDLE_PATH="/gems"
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

# Install essential system dependencies - this rarely changes
RUN apk update && apk add --no-cache \
  openssl \
  tar \
  build-base \
  tzdata \
  postgresql-dev \
  postgresql-client \
  git \
  curl \
  xz \
  musl \
  ruby-full \
  ruby-dev \
  gcc \
  make \
  musl-dev \
  openssl-dev \
  g++ \
  linux-headers \
  vips \
  && mkdir -p /var/app \
  && gem install bundler

# Copy Node and set up npm/pnpm - this rarely changes
COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \
  && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx \
  && npm install -g pnpm@${PNPM_VERSION} \
  && pnpm --version

WORKDIR /app

# Set Ruby bundler config - rarely changes
RUN bundle config set --local force_ruby_platform true

# Copy only dependency files first to leverage caching
COPY Gemfile Gemfile.lock ./
# Install Ruby dependencies - cached unless Gemfile/Gemfile.lock changes
RUN if [ "$RAILS_ENV" = "production" ]; then \
  bundle config set without 'development test'; bundle install -j 4 -r 3; \
  else bundle install -j 4 -r 3; \
  fi

# Install JS dependencies - cached unless package.json/pnpm-lock.yaml changes
COPY package.json pnpm-lock.yaml ./
RUN pnpm i

# Create log directory - rarely changes
RUN mkdir -p /app/log

# Copy application code excluding customconfig and README
COPY . /app
RUN rm -rf /app/customconfig /app/README* /app/javascript



# Generate production assets if production environment
RUN if [ "$RAILS_ENV" = "production" ]; then \
  SECRET_KEY_BASE=precompile_placeholder RAILS_LOG_TO_STDOUT=enabled bundle exec rake assets:precompile \
  && rm -rf spec node_modules tmp/cache; \
  fi

# Generate .git_sha file with current commit hash
RUN git rev-parse HEAD > /app/.git_sha

# Clean up to reduce final image size
RUN rm -rf /gems/ruby/3.3.0/cache/*.gem \
  && find /gems/ruby/3.3.0/gems/ \( -name "*.c" -o -name "*.o" \) -delete \
  && rm -rf .git \
  && rm -f .gitignore

# Copy customconfig and README separately to prevent rebuilds
COPY customconfig/ /app/customconfig/
COPY app/javascript/ /app/app/javascript/
COPY README* /app/

# final build stage
FROM ruby:3.3.3-alpine3.19

# Set ARGs and ENVs upfront
ARG NODE_VERSION="23.7.0"
ARG PNPM_VERSION="10.2.0"
ARG BUNDLE_WITHOUT="development:test"
ARG RAILS_SERVE_STATIC_FILES=true
ARG RAILS_ENV=production
ARG EXECJS_RUNTIME="Disabled"
ARG BUNDLE_FORCE_RUBY_PLATFORM=1

ENV NODE_VERSION=${NODE_VERSION}
ENV PNPM_VERSION=${PNPM_VERSION}
ENV BUNDLE_WITHOUT=${BUNDLE_WITHOUT}
ENV BUNDLER_VERSION=2.5.11
ENV EXECJS_RUNTIME=${EXECJS_RUNTIME}
ENV RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES}
ENV BUNDLE_FORCE_RUBY_PLATFORM=${BUNDLE_FORCE_RUBY_PLATFORM}
ENV RAILS_ENV=${RAILS_ENV}
ENV BUNDLE_PATH="/gems"

# Install runtime dependencies - this rarely changes
RUN apk update && apk add --no-cache \
  build-base \
  openssl \
  tzdata \
  postgresql-client \
  imagemagick \
  git \
  vips \
  && gem install bundler

# Copy node from the node image - rarely changes
COPY --from=node /usr/local/bin/node /usr/local/bin/
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules

# Install development tools conditionally
RUN if [ "$RAILS_ENV" != "production" ]; then \
  apk add --no-cache curl \
  && ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \
  && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx \
  && npm install -g pnpm@${PNPM_VERSION} \
  && pnpm --version; \
  fi

# Copy gems first - rarely changes
COPY --from=pre-builder /gems/ /gems/

# Copy application - changes frequently but doesn't invalidate above layers
COPY --from=pre-builder /app /app

# Copy .git_sha file separately to avoid cache invalidation for the app directory
COPY --from=pre-builder /app/.git_sha /app/.git_sha

WORKDIR /app

EXPOSE 3000 